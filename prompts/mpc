let's address the problem in a different way now, Using MPC for just trajectory generation is not a very hard task, so why not create two layers of mpc one for trajectory generation and the other for calculating motor joint angles to follow the trajectory (kicking out the Inverse Kinematics from the loop). the picture that I have in mind looks like this:

The end-effector initial position and joint angles are known, I want the ee to move to a final position in the same environment as previously described (having start, goal, and obstacle). My goal position is fed to an MPC Trajectory generation block which has the constraints of the environment i.e., goal position, obstacle etc. It has a cost function that looks something like:

$$J_{traj} = \norm(P_k - P_g)^2 + \norm(P_k - P_o)^2$$

where P_k is the position of the ee at time step k P_g is the goal position and P_o is the obstacle position. This blocks generate a trajectory over a horizon having some constraints:

1. P_k should always be in the safe region (away from the obstacle)
2. terminal constraint ( end of the horizon should reach in the vicinity of the goal - soft constraint)
3. trajectory should be in the robot's reachable workspace

This block works over a horizon $N_{traj}$ and generates positions for the end effector to follow over the horizon: p_k, P_k+1, P_k+2, ......P_N

This trajectory is sent to the MPC_Kinematics block which is responsible to calculate joint angles for the robot to follow the trajectory. Now this block has it's own cost function that looks like this:

$$J_{kinematic} =    \norm(P_k - P_g)^2  + \norm(\delta(q))$$

Where $\delta(q)$ is the difference between the joint angles q for consecutive time steps. We want the mpc to find, through optimization, a value for $delta(q)$, such that it minimizes the cost function and satisfies the constraints of the environment and the dynamics, we find a value for q that will be fed to the forward kinematics model to get the new position P_k+1 which we need to ensure is on the trajectory and $\delta(q)$ value is also optimzed. 

This block generates the 4 joint angles needed to keep the ee on the trajectory, and send these angels to the PD controller block which remains as it is and calculates the motor torques. The motor torques are sent to the real robot and the robot moves. The loop continues when the robot gives a feedback to the mpc_trajectory to update the information of the state and the trajectory is again generated and the joints angles are again calcualted and the loop goes on until the ee reaches the final position. 

How feasible this architecture seems, What are the caveats? what additional considerations should be taken
